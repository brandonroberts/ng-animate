{"version":3,"file":"systemjs_component_resolver.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/systemjs_component_resolver.ts"],"names":[],"mappings":"OACO,EAAQ,QAAQ,EAAE,MAAM,EAAE,MAAM,uBAAuB;AAG9D;;GAEG;AACH;IACE,YAAoB,SAA4B;QAA5B,cAAS,GAAT,SAAS,CAAmB;IAAG,CAAC;IAEpD,gBAAgB,CAAC,aAAyB;QACxC,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAO,MAAO,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,IAC3D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAO,aAAa,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED,UAAU,KAAI,CAAC;AACjB,CAAC;AAAA","sourcesContent":["import { ComponentResolver } from './component_resolver';\nimport { Type, isString, global } from '../../src/facade/lang';\nimport { ComponentFactory } from './component_factory';\n\n/**\n * Component resolver that can load components lazily\n */\nexport class SystemJsComponentResolver implements ComponentResolver {\n  constructor(private _resolver: ComponentResolver) {}\n\n  resolveComponent(componentType:string|Type):Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      return (<any>global).System.import(componentType).then(module =>\n        this._resolver.resolveComponent(module.default));\n    } else {\n      return this._resolver.resolveComponent(<Type>componentType);\n    }\n  }\n\n  clearCache() {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}