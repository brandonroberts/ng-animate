{"version":3,"file":"animation_player.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/animation/animation_player.ts"],"names":[],"mappings":"OAAO,EAAC,iBAAiB,EAAC,MAAM,gBAAgB;OACzC,EAAC,aAAa,EAAC,MAAM,sBAAsB;AAElD;IAUE,IAAI,YAAY,KAAsB,MAAM,IAAI,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;IAC/F,IAAI,YAAY,CAAC,MAAuB,IAAI,MAAM,IAAI,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;AACvG,CAAC;AAED;IAGE;QAFQ,mBAAc,GAAG,EAAE,CAAC;QACrB,iBAAY,GAAoB,IAAI,CAAC;QAE1C,iBAAiB,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC5C,CAAC;IACD,SAAS;QACP,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,MAAM,CAAC,EAAY,IAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,IAAI,KAAU,CAAC;IACf,KAAK,KAAU,CAAC;IAChB,OAAO,KAAU,CAAC;IAClB,MAAM;QACJ,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IACD,OAAO,KAAU,CAAC;IAClB,KAAK,KAAU,CAAC;IAChB,WAAW,CAAC,CAAC,IAAS,CAAC;IACvB,WAAW,KAAa,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAAA","sourcesContent":["import {scheduleMicroTask} from '../facade/lang';\nimport {BaseException} from '../facade/exceptions';\n\nexport abstract class AnimationPlayer {\n  abstract onDone(fn: Function): void;\n  abstract play(): void;\n  abstract pause(): void;\n  abstract restart(): void;\n  abstract finish(): void;\n  abstract destroy(): void;\n  abstract reset(): void;\n  abstract setPosition(p): void;\n  abstract getPosition(): number;\n  get parentPlayer(): AnimationPlayer { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n  set parentPlayer(player: AnimationPlayer) { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n}\n\nexport class NoOpAnimationPlayer implements AnimationPlayer {\n  private _subscriptions = [];\n  public parentPlayer: AnimationPlayer = null;\n  constructor() {\n    scheduleMicroTask(() => this._onFinish());\n  }\n  _onFinish() {\n    this._subscriptions.forEach(entry => { entry(); });\n    this._subscriptions = [];\n  }\n  onDone(fn: Function): void { this._subscriptions.push(fn); }\n  play(): void {}\n  pause(): void {}\n  restart(): void {}\n  finish(): void {\n    this._onFinish();\n  }\n  destroy(): void {}\n  reset(): void {}\n  setPosition(p): void {}\n  getPosition(): number { return 0; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}