{"version":3,"file":"component_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/component_resolver.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiD,uBAAuB,CAAC,CAAA;AACzE,2BAA4B,6BAA6B,CAAC,CAAA;AAC1D,sBAA6B,wBAAwB,CAAC,CAAA;AACtD,2BAAwB,0BAA0B,CAAC,CAAA;AACnD,kCAA+B,qBAAqB,CAAC,CAAA;AACrD,2BAAyB,kBAAkB,CAAC,CAAA;AAE5C;;;GAGG;AACH;IAAA;IAGA,CAAC;IAAD,wBAAC;AAAD,CAAC,AAHD,IAGC;AAHqB,yBAAiB,oBAGtC,CAAA;AAED,6BAA6B,IAAS;IACpC,MAAM,CAAC,IAAI,YAAY,oCAAgB,CAAC;AAC1C,CAAC;AACD;IAAgD,8CAAiB;IAAjE;QAAgD,8BAAiB;IAkBjE,CAAC;IAjBC,qDAAgB,GAAhB,UAAiB,SAAsB;QACrC,EAAE,CAAC,CAAC,eAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,sBAAc,CAAC,MAAM,CAAC,IAAI,0BAAa,CAAC,qCAAmC,SAAS,OAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1G,CAAC;QAED,IAAI,SAAS,GAAG,sBAAS,CAAC,WAAW,CAAO,SAAS,CAAC,CAAC;QACvD,IAAI,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,cAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,0BAAa,CAAC,8BAA4B,gBAAS,CAAC,SAAS,CAAC,WAAQ,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,CAAC,sBAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClD,CAAC;IACD,+CAAU,GAAV,cAAc,CAAC;IACV,qCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,uBAAU,EAAE;KACnB,CAAC;IACF,iCAAC;AAAD,CAAC,AAlBD,CAAgD,iBAAiB,GAkBhE;AAlBY,kCAA0B,6BAkBtC,CAAA","sourcesContent":["import {Type, isBlank, isString, stringify} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {PromiseWrapper} from '../../src/facade/async';\nimport {reflector} from '../reflection/reflection';\nimport {ComponentFactory} from './component_factory';\nimport {Injectable} from '../di/decorators';\n\n/**\n * Low-level service for loading {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n */\nexport abstract class ComponentResolver {\n  abstract resolveComponent(component: Type|string): Promise<ComponentFactory<any>>;\n  abstract clearCache();\n}\n\nfunction _isComponentFactory(type: any): boolean {\n  return type instanceof ComponentFactory;\n}\nexport class ReflectorComponentResolver extends ComponentResolver {\n  resolveComponent(component: Type|string): Promise<ComponentFactory<any>> {\n    if (isString(component)) {\n      return PromiseWrapper.reject(new BaseException(`Cannot resolve component using '${component}'.`), null);\n    }\n\n    var metadatas = reflector.annotations(<Type>component);\n    var componentFactory = metadatas.find(_isComponentFactory);\n\n    if (isBlank(componentFactory)) {\n      throw new BaseException(`No precompiled component ${stringify(component)} found`);\n    }\n    return PromiseWrapper.resolve(componentFactory);\n  }\n  clearCache() {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}