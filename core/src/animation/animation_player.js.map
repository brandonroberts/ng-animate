{"version":3,"file":"animation_player.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_player.ts"],"names":[],"mappings":";AAAA,qBAAgC,gBAAgB,CAAC,CAAA;AACjD,2BAA4B,sBAAsB,CAAC,CAAA;AAEnD;IAAA;IAYA,CAAC;IAFC,sBAAI,yCAAY;aAAhB,cAAsC,MAAM,IAAI,0BAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;aAC/F,UAAiB,MAAuB,IAAI,MAAM,IAAI,0BAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;;;OADN;IAEjG,sBAAC;AAAD,CAAC,AAZD,IAYC;AAZqB,uBAAe,kBAYpC,CAAA;AAED;IAGE;QAHF,iBAqBC;QApBS,mBAAc,GAAG,EAAE,CAAC;QACrB,iBAAY,GAAoB,IAAI,CAAC;QAE1C,wBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC5C,CAAC;IACD,uCAAS,GAAT;QACE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,KAAK,IAAM,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,oCAAM,GAAN,UAAO,EAAY,IAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,kCAAI,GAAJ,cAAc,CAAC;IACf,mCAAK,GAAL,cAAe,CAAC;IAChB,qCAAO,GAAP,cAAiB,CAAC;IAClB,oCAAM,GAAN;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IACD,qCAAO,GAAP,cAAiB,CAAC;IAClB,mCAAK,GAAL,cAAe,CAAC;IAChB,yCAAW,GAAX,UAAY,CAAC,IAAS,CAAC;IACvB,yCAAW,GAAX,cAAwB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,0BAAC;AAAD,CAAC,AArBD,IAqBC;AArBY,2BAAmB,sBAqB/B,CAAA","sourcesContent":["import {scheduleMicroTask} from '../facade/lang';\nimport {BaseException} from '../facade/exceptions';\n\nexport abstract class AnimationPlayer {\n  abstract onDone(fn: Function): void;\n  abstract play(): void;\n  abstract pause(): void;\n  abstract restart(): void;\n  abstract finish(): void;\n  abstract destroy(): void;\n  abstract reset(): void;\n  abstract setPosition(p): void;\n  abstract getPosition(): number;\n  get parentPlayer(): AnimationPlayer { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n  set parentPlayer(player: AnimationPlayer) { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n}\n\nexport class NoOpAnimationPlayer implements AnimationPlayer {\n  private _subscriptions = [];\n  public parentPlayer: AnimationPlayer = null;\n  constructor() {\n    scheduleMicroTask(() => this._onFinish());\n  }\n  _onFinish() {\n    this._subscriptions.forEach(entry => { entry(); });\n    this._subscriptions = [];\n  }\n  onDone(fn: Function): void { this._subscriptions.push(fn); }\n  play(): void {}\n  pause(): void {}\n  restart(): void {}\n  finish(): void {\n    this._onFinish();\n  }\n  destroy(): void {}\n  reset(): void {}\n  setPosition(p): void {}\n  getPosition(): number { return 0; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}