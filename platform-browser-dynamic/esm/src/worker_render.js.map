{"version":3,"file":"worker_render.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser-dynamic/src/worker_render.ts"],"names":[],"mappings":"OAAO,EAAC,GAAG,EAAC,MAAM,mBAAmB;OAC9B,EAAC,OAAO,EAAC,MAAM,gBAAgB;OAC/B,EAAC,mBAAmB,EAAC,MAAM,2BAA2B;OACtD,EACL,mCAAmC,EACnC,yCAAyC,EAC1C,MAAM,2BAA2B;OAC3B,EACL,cAAc,EAEd,kBAAkB,EACnB,MAAM,eAAe;OACf,EAAC,oBAAoB,EAAE,aAAa,EAAC,MAAM,2BAA2B;OACtE,EAAC,SAAS,EAAC,MAAM,eAAe;OAChC,EAAC,cAAc,EAAC,MAAM,gBAAgB;AAE7C,OAAO,MAAM,2CAA2C,GAA2C;IACjG,mCAAmC;IACnC,uBAAuB,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAC;IACzD,mBAAmB;IACnB,uBAAuB,CAAC,EAAC,OAAO,EAAE,yCAAyC,EAAE,WAAW,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,EAAC;CAC5H,CAAC;AAEF,gCACI,eAAuB,EACvB,eAAwD;IAC1D,IAAI,GAAG,GAAG,kBAAkB,CAAC,gBAAgB,CACzC;QACE,2CAA2C;QAC3C,uBAAuB,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,eAAe,EAAC;QAC3E,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC;IACrC,+DAA+D;IAC/D,wDAAwD;IACxD,mBAAmB;IACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import {XHR} from \"@angular/compiler\";\nimport {XHRImpl} from \"./xhr/xhr_impl\";\nimport {MessageBasedXHRImpl} from \"./web_workers/ui/xhr_impl\";\nimport {\n  WORKER_RENDER_APPLICATION_PROVIDERS,\n  WORKER_RENDER_STARTABLE_MESSAGING_SERVICE\n} from '@angular/platform-browser';\nimport {\n  ApplicationRef,\n  PlatformRef,\n  ReflectiveInjector,\n} from '@angular/core';\nimport {workerRenderPlatform, WORKER_SCRIPT} from '@angular/platform-browser';\nimport {isPresent} from './facade/lang';\nimport {PromiseWrapper} from './facade/async';\n\nexport const WORKER_RENDER_DYNAMIC_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  WORKER_RENDER_APPLICATION_PROVIDERS,\n  /* @ts2dart_Provider */ {provide: XHR, useClass: XHRImpl},\n  MessageBasedXHRImpl,\n  /* @ts2dart_Provider */ {provide: WORKER_RENDER_STARTABLE_MESSAGING_SERVICE, useExisting: MessageBasedXHRImpl, multi: true},\n];\n\nexport function bootstrapRender(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_RENDER_DYNAMIC_APPLICATION_PROVIDERS,\n        /* @ts2dart_Provider */ {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerRenderPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}