{"version":3,"file":"worker_render.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/src/worker_render.ts"],"names":[],"mappings":";AAAA,yBAAkB,mBAAmB,CAAC,CAAA;AACtC,yBAAsB,gBAAgB,CAAC,CAAA;AACvC,yBAAkC,2BAA2B,CAAC,CAAA;AAC9D,iCAGO,2BAA2B,CAAC,CAAA;AACnC,qBAIO,eAAe,CAAC,CAAA;AACvB,iCAAkD,2BAA2B,CAAC,CAAA;AAC9E,qBAAwB,eAAe,CAAC,CAAA;AACxC,sBAA6B,gBAAgB,CAAC,CAAA;AAEjC,mDAA2C,GAA2C;IACjG,sDAAmC;IACnC,uBAAuB,CAAC,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,kBAAO,EAAC;IACzD,8BAAmB;IACnB,uBAAuB,CAAC,EAAC,OAAO,EAAE,4DAAyC,EAAE,WAAW,EAAE,8BAAmB,EAAE,KAAK,EAAE,IAAI,EAAC;CAC5H,CAAC;AAEF,yBACI,eAAuB,EACvB,eAAwD;IAC1D,IAAI,GAAG,GAAG,yBAAkB,CAAC,gBAAgB,CACzC;QACE,mDAA2C;QAC3C,uBAAuB,CAAC,EAAC,OAAO,EAAE,gCAAa,EAAE,QAAQ,EAAE,eAAe,EAAC;QAC3E,gBAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,uCAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC;IACrC,+DAA+D;IAC/D,wDAAwD;IACxD,mBAAmB;IACnB,MAAM,CAAC,sBAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAc,CAAC,CAAC,CAAC;AACzD,CAAC;AAde,uBAAe,kBAc9B,CAAA","sourcesContent":["import {XHR} from \"@angular/compiler\";\nimport {XHRImpl} from \"./xhr/xhr_impl\";\nimport {MessageBasedXHRImpl} from \"./web_workers/ui/xhr_impl\";\nimport {\n  WORKER_RENDER_APPLICATION_PROVIDERS,\n  WORKER_RENDER_STARTABLE_MESSAGING_SERVICE\n} from '@angular/platform-browser';\nimport {\n  ApplicationRef,\n  PlatformRef,\n  ReflectiveInjector,\n} from '@angular/core';\nimport {workerRenderPlatform, WORKER_SCRIPT} from '@angular/platform-browser';\nimport {isPresent} from './facade/lang';\nimport {PromiseWrapper} from './facade/async';\n\nexport const WORKER_RENDER_DYNAMIC_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  WORKER_RENDER_APPLICATION_PROVIDERS,\n  /* @ts2dart_Provider */ {provide: XHR, useClass: XHRImpl},\n  MessageBasedXHRImpl,\n  /* @ts2dart_Provider */ {provide: WORKER_RENDER_STARTABLE_MESSAGING_SERVICE, useExisting: MessageBasedXHRImpl, multi: true},\n];\n\nexport function bootstrapRender(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_RENDER_DYNAMIC_APPLICATION_PROVIDERS,\n        /* @ts2dart_Provider */ {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerRenderPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}