{"version":3,"file":"worker_render.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/platform/dynamic/worker_render.ts"],"names":[],"mappings":"OAAO,EAAC,0CAA0C,EAAC,MAAM,yBAAyB;OAC3E,EAAC,cAAc,EAAE,kBAAkB,EAAC,MAAM,eAAe;OACzD,EAAC,oBAAoB,EAAE,aAAa,EAAC,MAAM,yBAAyB;OACpE,EAAC,SAAS,EAAC,MAAM,mBAAmB;OACpC,EAAC,cAAc,EAAC,MAAM,oBAAoB;AAEjD,OAAO,MAAM,mCAAmC,GAA2C;IACzF,0CAA0C;CAC3C,CAAC;AAEF,gCACI,eAAuB,EACvB,eAAwD;IAC1D,IAAI,GAAG,GAAG,kBAAkB,CAAC,gBAAgB,CACzC;QACE,mCAAmC;QACnC,uBAAuB,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,eAAe,EAAC;QAC3E,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC;IACrC,+DAA+D;IAC/D,wDAAwD;IACxD,mBAAmB;IACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import {WORKER_RENDER_STATIC_APPLICATION_PROVIDERS} from \"../static/worker_render\";\nimport {ApplicationRef, ReflectiveInjector} from \"@angular/core\";\nimport {workerRenderPlatform, WORKER_SCRIPT} from \"../common/worker_render\";\nimport {isPresent} from \"../../facade/lang\";\nimport {PromiseWrapper} from \"../../facade/async\";\n\nexport const WORKER_RENDER_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  WORKER_RENDER_STATIC_APPLICATION_PROVIDERS\n];\n\nexport function bootstrapRender(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_RENDER_APPLICATION_PROVIDERS,\n        /* @ts2dart_Provider */ {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerRenderPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}