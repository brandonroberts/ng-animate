{"version":3,"file":"worker_render.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/src/worker_render.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,OAAO,EAAC,MAAM,eAAe;OACzC,EAAC,cAAc,EAAC,MAAM,gBAAgB;OACtC,EACL,cAAc,EAEd,kBAAkB,EAClB,WAAW,EACX,cAAc,EACd,cAAc,EACf,MAAM,eAAe;OACf,EAAC,mCAAmC,EAAC,MAAM,2BAA2B;OACtE,EACL,aAAa,EACb,gCAAgC,EAChC,6BAA6B,EAC9B,MAAM,kCAAkC;AAEzC,SACE,aAAa,EACb,gCAAgC,EAChC,+BAA+B,EAC/B,0CAA0C,QACrC,kCAAkC,CAAC;AAC1C,SACE,mCAAmC,EACnC,yCAAyC,EACzC,iBAAiB,QACZ,2BAA2B,CAAC;AACnC,SACE,mBAAmB,EACnB,0BAA0B,EAC1B,KAAK,EACL,WAAW,QACN,4CAA4C,CAAC;AACpD,SACE,eAAe,EACf,oBAAoB,EACpB,2BAA2B,QACtB,6CAA6C,CAAC;AACrD,SAAQ,SAAS,QAAO,iCAAiC,CAAC;AAC1D,cAAc,kCAAkC,CAAC;AAEjD,SAAQ,gCAAgC,QAAO,0CAA0C,CAAC;AAE1F;IACE,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,cAAc,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,CAAC,CAAC;IACxF,CAAC;IACD,MAAM,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;AACvD,CAAC;AAED,sCACI,eAAuB,EACvB,eAAwD;IAC1D,IAAI,GAAG,GAAG,kBAAkB,CAAC,gBAAgB,CACzC;QACE,mCAAmC;QACnC,uBAAuB,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,eAAe,EAAC;QAC3E,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE;KAClD,EACD,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC;IACrC,+DAA+D;IAC/D,wDAAwD;IACxD,mBAAmB;IACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import {isPresent, isBlank} from './facade/lang';\nimport {PromiseWrapper} from './facade/async';\nimport {\n  ApplicationRef,\n  PlatformRef,\n  ReflectiveInjector,\n  getPlatform,\n  createPlatform,\n  assertPlatform\n} from '@angular/core';\nimport {WORKER_RENDER_APPLICATION_PROVIDERS} from './webworker/worker_render';\nimport {\n  WORKER_SCRIPT,\n  WORKER_RENDER_PLATFORM_PROVIDERS,\n  WORKER_RENDER_PLATFORM_MARKER\n} from './webworker/worker_render_common';\n\nexport {\n  WORKER_SCRIPT,\n  WORKER_RENDER_PLATFORM_PROVIDERS,\n  initializeGenericWorkerRenderer,\n  WORKER_RENDER_APPLICATION_COMMON_PROVIDERS\n} from './webworker/worker_render_common';\nexport {\n  WORKER_RENDER_APPLICATION_PROVIDERS,\n  WORKER_RENDER_STARTABLE_MESSAGING_SERVICE,\n  WebWorkerInstance\n} from './webworker/worker_render';\nexport {\n  ClientMessageBroker,\n  ClientMessageBrokerFactory,\n  FnArg,\n  UiArguments\n} from './web_workers/shared/client_message_broker';\nexport {\n  ReceivedMessage,\n  ServiceMessageBroker,\n  ServiceMessageBrokerFactory\n} from './web_workers/shared/service_message_broker';\nexport {PRIMITIVE} from './web_workers/shared/serializer';\nexport * from './web_workers/shared/message_bus';\n\nexport {WORKER_RENDER_LOCATION_PROVIDERS} from '../src/web_workers/ui/location_providers';\n\nexport function workerRenderPlatform(): PlatformRef {\n  if (isBlank(getPlatform())) {\n    createPlatform(ReflectiveInjector.resolveAndCreate(WORKER_RENDER_PLATFORM_PROVIDERS));\n  }\n  return assertPlatform(WORKER_RENDER_PLATFORM_MARKER);\n}\n\nexport function bootstrapStaticRender(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_RENDER_APPLICATION_PROVIDERS,\n        /* @ts2dart_Provider */ {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerRenderPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}